package lyftProblem;
import java.util.ArrayList;
import java.util.HashMap;

public class DetourCalculations {
	
	// Class coordinates for managing latitude and longitude
	static class coordinates{
		
		private double latitude, longitude;
		
		public coordinates(double latitude, double longitude){
			this.longitude = longitude;
			this.latitude = latitude;
		}

		void setLongitude(double longitude){
			this.longitude = longitude;
		}

		void setLatitude(double latitude){
			this.latitude = latitude;
		}

		double getLongitude(){
			return this.longitude;
		}

		double getLatitude(){
			return this.latitude;
		}	
		
	}
	
	// Possible number of detours
	static ArrayList<String> possibleDet = new ArrayList<String>();
	
	// Map for storing the coordinates and data
	static HashMap<String, coordinates> points = new HashMap<String, coordinates>();
	
	// Coordinates declaration : I wanted to calculate how much distance is between Lyft, Google, Apple & Uber's address in SF	
	// A: Lyft SF address, B: Google SF address, C: Apple SF Address, D: Uber SF Address
	static coordinates A = new coordinates(37.760339, -122.412672) , B = new coordinates(37.790051, -122.390192), C = new coordinates(37.790571, -122.402327), D = new coordinates(37.775231, -122.47528);
	
	static double calcDist(coordinates source, coordinates destination){

		final double radiusOfEarth = 3960; // miles

		double diffLat = Math.toRadians(destination.latitude - source.latitude);
		double diffLong = Math.toRadians(destination.longitude - source.longitude);

		double lat1 = Math.toRadians(source.latitude);
		double lat2 = Math.toRadians(destination.latitude);
		
		/* Use of Haversine Formula */
		double a = Math.pow(Math.sin(diffLat/2) , 2) + Math.pow(Math.sin(diffLong/2), 2)* Math.cos(lat1)* Math.cos(lat2);
		double c  = 2*Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
		double distance = radiusOfEarth * c;

		return distance;
	}

	// Method to calculate the total distance of the detour, return the index of the path taken
	static int shorterDetour(){
		/* list containing all the calculated detour distances */
		ArrayList<Double> dDistances = new ArrayList<Double>();
		double currentDistance = 0;

		for(String eachDetour : possibleDet){
			char[] vertices = eachDetour.toCharArray();
			for(int index = 0; index < vertices.length-1; index ++){
				String source = ""+vertices[index];
				String destination = ""+vertices[index+1];
				currentDistance += calcDist(points.get(source), points.get(destination));				
			}
			dDistances.add(currentDistance);
		}

		double minDD = dDistances.get(0);
		int index = 0;
		
		for(double current : dDistances)
			if(minDD > current){
				minDD = current;
				index = dDistances.indexOf(current);
			}
		System.out.println("Shorter detour distance is: "+ Math.round(minDD)+" miles");
		return index;
	}
	
	public static void main(String[] args){

		/* Populate the arraylist with two rides that the two drives can take*/
		possibleDet.add("ACDB");
		possibleDet.add("CABD");

		/* Initialize the hash map */
		points.put("A", A);
		points.put("B", B);
		points.put("C", C);
		points.put("D", D);

		/* Display the shorter detour path*/
		System.out.println("Shorter detour path is: "+possibleDet.get(shorterDetour()));

	}

}
